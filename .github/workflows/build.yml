name: Build Artifacts
on:
  workflow_dispatch:
    inputs:
      version:
        description: |
          VERSION: yyyy.mm.dd[.rev] or rev
        required: true
        type: string
      channel:
        description: |
          SOURCE of this build's updates: stable/nightly/master/<repo>
        required: true
        default: stable
        type: string
      unix:
        description: yt-dlp, yt-dlp.tar.gz, yt-dlp_linux, yt-dlp_linux.zip
        default: true
        type: boolean
      origin:
        description: Origin
        required: false
        default: 'current repo'
        type: choice
        options:
        - 'current repo'

permissions:
  contents: read

jobs:
  process:
    runs-on: ubuntu-latest
    outputs:
      origin: ${{ steps.process_origin.outputs.origin }}
    steps:
      - name: Process origin
        id: process_origin
        run: |
          echo "origin=${{ inputs.origin == 'current repo' && github.repository || inputs.origin }}" | tee "$GITHUB_OUTPUT"

  unix:
    needs: process
    if: inputs.unix
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for changelog
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-variant: Mambaforge
          use-mamba: true
          channels: conda-forge
          auto-update-conda: true
          activate-environment: ""
          auto-activate-base: false
      - name: Install Requirements
        run: |
          sudo apt -y install zip pandoc man sed
          cat > ./requirements.txt << EOF
          python=3.10.*
          pyinstaller
          brotli-python
          EOF
          python devscripts/install_deps.py --print \
            --exclude brotli --exclude brotlicffi \
            --include secretstorage >> ./requirements.txt
          mamba create -n build --file ./requirements.txt

      - name: Prepare
        run: |
          python devscripts/update-version.py -c "${{ inputs.channel }}" -r "${{ needs.process.outputs.origin }}" "${{ inputs.version }}"
          python devscripts/update_changelog.py -vv
          python devscripts/make_lazy_extractors.py
      - name: Build Unix platform-independent binary
        run: |
          make all tar
      - name: Build Unix standalone binary
        shell: bash -l {0}
        run: |
          unset LD_LIBRARY_PATH  # Harmful; set by setup-python
          conda activate build
          python -m bundle.pyinstaller --onedir
          (cd ./dist/yt-dlp_linux && zip -r ../yt-dlp_linux.zip .)
          python -m bundle.pyinstaller
          mv ./dist/yt-dlp_linux ./yt-dlp_linux
          mv ./dist/yt-dlp_linux.zip ./yt-dlp_linux.zip

      - name: Verify --update-to
        #if: vars.UPDATE_TO_VERIFICATION
        run: |
         chmod +x ./yt-dlp_linux
         cp ./yt-dlp_linux ./yt-dlp_linux_downgraded
         version="$(./yt-dlp_linux --version)"
         ./yt-dlp_linux_downgraded -v --update-to yt-dlp/yt-dlp@2023.03.04
         downgraded_version="$(./yt-dlp_linux_downgraded --version)"
         [[ "$version" != "$downgraded_version" ]]
